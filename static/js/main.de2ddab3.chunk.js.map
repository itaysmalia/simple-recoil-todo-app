{"version":3,"sources":["components/CreateTodo/CreateTodo.module.scss","components/TodoList/TodoItem/TodoItem.module.scss","components/TodoList/TodoList.module.scss","App.module.scss","components/AppBar/AppBar.module.scss","components/AppBar/AppBar.js","recoil-atoms/index.js","components/CreateTodo/CreateTodo.js","components/TodoList/TodoItem/TodoItem.js","components/TodoList/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","AppBar","className","styles","nav","href","target","rel","todosState","atom","key","default","id","TextInput","useState","text","setText","inputRef","useRef","setTodos","useSetRecoilState","generateTodo","useCallback","value","isCompleted","handleTextChange","handleAdd","e","preventDefault","todos","current","focus","form","onSubmit","title","input","placeholder","autoFocus","ref","onChange","add","type","TodoItem","item","useRecoilState","setTodo","cn","completed","toggle","onClick","prev","TodoList","useRecoilValue","wrapper","list","map","App","app","mainContent","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.de2ddab3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"CreateTodo_form__1g6rx\",\"title\":\"CreateTodo_title__270-9\",\"input\":\"CreateTodo_input__10pcQ\",\"add\":\"CreateTodo_add__1MMRv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"TodoItem_item__doVCQ\",\"text\":\"TodoItem_text__3-Khz\",\"completed\":\"TodoItem_completed__33yqF\",\"toggle\":\"TodoItem_toggle__2t2hg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"TodoList_wrapper__2qUIv\",\"title\":\"TodoList_title__2jbcz\",\"list\":\"TodoList_list__1X2Te\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__2ziFi\",\"mainContent\":\"App_mainContent__3N2BW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"AppBar_nav__1ctGR\"};","import React from \"react\";\n\nimport styles from \"./AppBar.module.scss\";\n\nconst AppBar = () => {\n  return (\n    <nav className={styles.nav}>\n      <h2>\n        Simple{\" \"}\n        <a href=\"https://recoiljs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Recoil.js\n        </a>{\" \"}\n        Todo App\n      </h2>\n    </nav>\n  );\n};\n\nexport default AppBar;\n","import { atom } from \"recoil\";\n\nexport const todosState = atom({\n  key: \"todosState\",\n  default: []\n});\n","import React, { useCallback, useRef, useState } from \"react\";\nimport { useSetRecoilState, atom } from \"recoil\";\nimport { todosState } from \"../../recoil-atoms\";\n\nimport styles from \"./CreateTodo.module.scss\";\n\nlet id = 1;\nfunction TextInput() {\n  const [text, setText] = useState();\n  const inputRef = useRef(null);\n  const setTodos = useSetRecoilState(todosState);\n\n  const generateTodo = useCallback(({ id, value }) => {\n    return atom({\n      key: `todo/${id}`,\n      default: {\n        id,\n        text: value,\n        isCompleted: false\n      }\n    });\n  }, []);\n\n  const handleTextChange = useCallback(({ target: { value } }) => {\n    setText(value);\n  }, []);\n\n  const handleAdd = useCallback(\n    (e) => {\n      e.preventDefault();\n      setTodos((todos) => [...todos, generateTodo({ id: id++, value: text })]);\n      setText(\"\");\n      inputRef.current.focus();\n    },\n    [text, setText, setTodos, generateTodo]\n  );\n\n  return (\n    <form className={styles.form} onSubmit={handleAdd}>\n      <h4 className={styles.title}>Todo Text:</h4>\n      <input\n        className={styles.input}\n        placeholder=\"Todo text\"\n        autoFocus\n        ref={inputRef}\n        value={text}\n        onChange={handleTextChange}\n      ></input>\n      <input className={styles.add} type=\"submit\" value=\"ADD TODO\" />\n    </form>\n  );\n}\n\nexport default TextInput;\n","import React from \"react\";\nimport { useRecoilState } from \"recoil\";\nimport cn from \"classnames\";\nimport { MdDone, MdClose } from \"react-icons/md\";\nimport styles from \"./TodoItem.module.scss\";\n\nconst TodoItem = ({ item }) => {\n  const [{ text, isCompleted }, setTodo] = useRecoilState(item);\n  return (\n    <div className={styles.item}>\n      <h2 className={cn(styles.text, { [styles.completed]: isCompleted })}>{text}</h2>\n      <span\n        className={styles.toggle}\n        onClick={() => setTodo((prev) => ({ ...prev, isCompleted: !isCompleted }))}\n      >\n        {isCompleted ? <MdClose /> : <MdDone />}\n      </span>\n    </div>\n  );\n};\n\nexport default TodoItem;\n","import React from \"react\";\nimport { useRecoilValue } from \"recoil\";\n\nimport TodoItem from \"./TodoItem/TodoItem\";\nimport { todosState } from \"../../recoil-atoms\";\n\nimport styles from \"./TodoList.module.scss\";\n\nconst TodoList = () => {\n  const todos = useRecoilValue(todosState);\n  return (\n    <div className={styles.wrapper}>\n      <h1 className={styles.title}>Todos List:</h1>\n      <ul className={styles.list}>\n        {todos.map((item) => (\n          <TodoItem {...{ item }} key={item.id} />\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default TodoList;\n","import React from \"react\";\n\nimport AppBar from \"./components/AppBar/AppBar\";\nimport TextInput from \"./components/CreateTodo/CreateTodo\";\nimport TodoList from \"./components/TodoList/TodoList\";\n\nimport styles from \"./App.module.scss\";\n\nfunction App() {\n  return (\n    <div className={styles.app}>\n      <AppBar />\n      <div className={styles.mainContent}>\n        <TextInput />\n        <TodoList />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { RecoilRoot } from \"recoil\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <App />\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}